
Pin_Programming_Pattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001fa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000022c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000736  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c6  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034e  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  00001645  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRC = 0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11100000;
  70:	80 ee       	ldi	r24, 0xE0	; 224
  72:	81 bb       	out	0x11, r24	; 17
	while (1) 
    {
		// Pattern-1
		PORTC = 0x00;
  74:	15 ba       	out	0x15, r1	; 21
		if (PINB & 0b10000000)
  76:	b7 9b       	sbis	0x16, 7	; 22
  78:	04 c0       	rjmp	.+8      	; 0x82 <main+0x16>
		{	PORTD |= 0b10000000;	}
  7a:	82 b3       	in	r24, 0x12	; 18
  7c:	80 68       	ori	r24, 0x80	; 128
  7e:	82 bb       	out	0x12, r24	; 18
  80:	03 c0       	rjmp	.+6      	; 0x88 <main+0x1c>
		else
		{	PORTD &= ~(0b10000000);	}
  82:	82 b3       	in	r24, 0x12	; 18
  84:	8f 77       	andi	r24, 0x7F	; 127
  86:	82 bb       	out	0x12, r24	; 18
		if (PINB & 0b01000000)
  88:	b6 9b       	sbis	0x16, 6	; 22
  8a:	04 c0       	rjmp	.+8      	; 0x94 <main+0x28>
		{	PORTD |= 0b01000000;	}
  8c:	82 b3       	in	r24, 0x12	; 18
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	82 bb       	out	0x12, r24	; 18
  92:	03 c0       	rjmp	.+6      	; 0x9a <main+0x2e>
		else
		{	PORTD &= ~(0b01000000);	}
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7b       	andi	r24, 0xBF	; 191
  98:	82 bb       	out	0x12, r24	; 18
		if (PINB & 0b00100000)
  9a:	b5 9b       	sbis	0x16, 5	; 22
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <main+0x3a>
		{	PORTD |= 0b00100000;	}
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	03 c0       	rjmp	.+6      	; 0xac <main+0x40>
		else
		{	PORTD &= ~(0b00100000);	}
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	8f 7d       	andi	r24, 0xDF	; 223
  aa:	82 bb       	out	0x12, r24	; 18
		if (PINA & 0b00000001)
  ac:	c8 99       	sbic	0x19, 0	; 25
  ae:	18 c0       	rjmp	.+48     	; 0xe0 <main+0x74>
  b0:	3b c0       	rjmp	.+118    	; 0x128 <main+0xbc>
		{
			for (int i = 0; i < 8; i = i+1)
			{
				PORTC = PORTC | (0b00000001 << i);
  b2:	45 b3       	in	r20, 0x15	; 21
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 2e       	mov	r0, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <main+0x54>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <main+0x50>
  c4:	84 2b       	or	r24, r20
  c6:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c8:	4f e7       	ldi	r20, 0x7F	; 127
  ca:	88 e3       	ldi	r24, 0x38	; 56
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	41 50       	subi	r20, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x62>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x6c>
  d8:	00 00       	nop
		{	PORTD |= 0b00100000;	}
		else
		{	PORTD &= ~(0b00100000);	}
		if (PINA & 0b00000001)
		{
			for (int i = 0; i < 8; i = i+1)
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x78>
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	28 30       	cpi	r18, 0x08	; 8
  e6:	31 05       	cpc	r19, r1
  e8:	24 f3       	brlt	.-56     	; 0xb2 <main+0x46>
			{
				PORTC = PORTC | (0b00000001 << i);
				_delay_ms(50);
			}
			// Pattern-3
			PORTC = 0xFF;
  ea:	8f ef       	ldi	r24, 0xFF	; 255
  ec:	85 bb       	out	0x15, r24	; 21
			for (int i = 0; i < 8; i = i+1)
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	17 c0       	rjmp	.+46     	; 0x122 <main+0xb6>
			{
				PORTC = PORTC & ~(0b00000001 << i);
  f4:	45 b3       	in	r20, 0x15	; 21
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 2e       	mov	r0, r18
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x96>
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	0a 94       	dec	r0
 104:	e2 f7       	brpl	.-8      	; 0xfe <main+0x92>
 106:	80 95       	com	r24
 108:	84 23       	and	r24, r20
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	4f e7       	ldi	r20, 0x7F	; 127
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	41 50       	subi	r20, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0xa6>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0xb0>
 11c:	00 00       	nop
				PORTC = PORTC | (0b00000001 << i);
				_delay_ms(50);
			}
			// Pattern-3
			PORTC = 0xFF;
			for (int i = 0; i < 8; i = i+1)
 11e:	2f 5f       	subi	r18, 0xFF	; 255
 120:	3f 4f       	sbci	r19, 0xFF	; 255
 122:	28 30       	cpi	r18, 0x08	; 8
 124:	31 05       	cpc	r19, r1
 126:	34 f3       	brlt	.-52     	; 0xf4 <main+0x88>
			{
				PORTC = PORTC & ~(0b00000001 << i);
				_delay_ms(50);
			}
		}
		if (PINA & 0b00000010)
 128:	c9 9b       	sbis	0x19, 1	; 25
 12a:	a4 cf       	rjmp	.-184    	; 0x74 <main+0x8>
		{
			// Pattern-2
			PORTC = 0x00;
 12c:	15 ba       	out	0x15, r1	; 21
			for (int i = 7; i >= 0; i = i-1)
 12e:	27 e0       	ldi	r18, 0x07	; 7
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	16 c0       	rjmp	.+44     	; 0x160 <main+0xf4>
			{
				PORTC = PORTC | (0b00000001 << i);
 134:	45 b3       	in	r20, 0x15	; 21
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 2e       	mov	r0, r18
 13c:	02 c0       	rjmp	.+4      	; 0x142 <main+0xd6>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <main+0xd2>
 146:	84 2b       	or	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	4f e7       	ldi	r20, 0x7F	; 127
 14c:	88 e3       	ldi	r24, 0x38	; 56
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	41 50       	subi	r20, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0xe4>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0xee>
 15a:	00 00       	nop
		}
		if (PINA & 0b00000010)
		{
			// Pattern-2
			PORTC = 0x00;
			for (int i = 7; i >= 0; i = i-1)
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	33 23       	and	r19, r19
 162:	44 f7       	brge	.-48     	; 0x134 <main+0xc8>
			{
				PORTC = PORTC | (0b00000001 << i);
				_delay_ms(50);
			}
			//Pattern-4
			PORTC = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	85 bb       	out	0x15, r24	; 21
			for (int i = 7; i >= 0; i = i-1)
 168:	27 e0       	ldi	r18, 0x07	; 7
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	17 c0       	rjmp	.+46     	; 0x19c <main+0x130>
			{
				PORTC = PORTC & ~(0b00000001 << i);
 16e:	45 b3       	in	r20, 0x15	; 21
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <main+0x110>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <main+0x10c>
 180:	80 95       	com	r24
 182:	84 23       	and	r24, r20
 184:	85 bb       	out	0x15, r24	; 21
 186:	4f e7       	ldi	r20, 0x7F	; 127
 188:	88 e3       	ldi	r24, 0x38	; 56
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	41 50       	subi	r20, 0x01	; 1
 18e:	80 40       	sbci	r24, 0x00	; 0
 190:	90 40       	sbci	r25, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x120>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x12a>
 196:	00 00       	nop
				PORTC = PORTC | (0b00000001 << i);
				_delay_ms(50);
			}
			//Pattern-4
			PORTC = 0xFF;
			for (int i = 7; i >= 0; i = i-1)
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	31 09       	sbc	r19, r1
 19c:	33 23       	and	r19, r19
 19e:	3c f7       	brge	.-50     	; 0x16e <main+0x102>
 1a0:	69 cf       	rjmp	.-302    	; 0x74 <main+0x8>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
