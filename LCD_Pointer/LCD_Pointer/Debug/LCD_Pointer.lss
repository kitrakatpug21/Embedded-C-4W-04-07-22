
LCD_Pointer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000893  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000340  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000393  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e3  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 cf 00 	jmp	0x19e	; 0x19e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <send_command>:
#include <util/delay.h>

void send_command(uint8_t command)
{
	// Set the LCD RS pin to 0
	PORTC = PORTC & ~(0b00000001);
  82:	95 b3       	in	r25, 0x15	; 21
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	95 bb       	out	0x15, r25	; 21
	// Load Command on the D0-D7 Pin
	PORTD = command;
  88:	82 bb       	out	0x12, r24	; 18
	// Create a positive edge at EN Pin
	PORTC = PORTC | (0b00000010);
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f ef       	ldi	r18, 0xFF	; 255
  92:	80 e7       	ldi	r24, 0x70	; 112
  94:	92 e0       	ldi	r25, 0x02	; 2
  96:	21 50       	subi	r18, 0x01	; 1
  98:	80 40       	sbci	r24, 0x00	; 0
  9a:	90 40       	sbci	r25, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <send_command+0x14>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <send_command+0x1e>
  a0:	00 00       	nop
	_delay_ms(100);
	PORTC = PORTC & ~(0b00000010);
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	8d 7f       	andi	r24, 0xFD	; 253
  a6:	85 bb       	out	0x15, r24	; 21
  a8:	2f ef       	ldi	r18, 0xFF	; 255
  aa:	80 e7       	ldi	r24, 0x70	; 112
  ac:	92 e0       	ldi	r25, 0x02	; 2
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	80 40       	sbci	r24, 0x00	; 0
  b2:	90 40       	sbci	r25, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <send_command+0x2c>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <send_command+0x36>
  b8:	00 00       	nop
  ba:	08 95       	ret

000000bc <send_data>:
	_delay_ms(100);
}
void send_data(char character)
{
	// Set the LCD RS pin to 1
	PORTC = PORTC | (0b00000001);
  bc:	95 b3       	in	r25, 0x15	; 21
  be:	91 60       	ori	r25, 0x01	; 1
  c0:	95 bb       	out	0x15, r25	; 21
	// Load Command on the D0-D7 Pin
	PORTD = character;
  c2:	82 bb       	out	0x12, r24	; 18
	// Create a positive edge at EN Pin
	PORTC = PORTC | (0b00000010);
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	85 bb       	out	0x15, r24	; 21
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	80 e7       	ldi	r24, 0x70	; 112
  ce:	92 e0       	ldi	r25, 0x02	; 2
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <send_data+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <send_data+0x1e>
  da:	00 00       	nop
	_delay_ms(100);
	PORTC = PORTC & ~(0b00000010);
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	8d 7f       	andi	r24, 0xFD	; 253
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	80 e7       	ldi	r24, 0x70	; 112
  e6:	92 e0       	ldi	r25, 0x02	; 2
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <send_data+0x2c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <send_data+0x36>
  f2:	00 00       	nop
  f4:	08 95       	ret

000000f6 <LCD_Initialize>:
  f6:	2f ef       	ldi	r18, 0xFF	; 255
  f8:	82 e5       	ldi	r24, 0x52	; 82
  fa:	97 e0       	ldi	r25, 0x07	; 7
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <LCD_Initialize+0x6>
 104:	00 c0       	rjmp	.+0      	; 0x106 <LCD_Initialize+0x10>
 106:	00 00       	nop
void LCD_Initialize()
{
	// Prelimary step
	_delay_ms(300);
	//1. Setup the LCD in 8-bit mode for 16 character and 2 rows
	send_command(0x38);
 108:	88 e3       	ldi	r24, 0x38	; 56
 10a:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
	//2. Setup the LCD for Left to RIght Data Shift
	send_command(0x06);
 10e:	86 e0       	ldi	r24, 0x06	; 6
 110:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
	//3. Setup the LCD Cursor
	send_command(0x0F);// cursor is solid	F- cursor blinky
 114:	8f e0       	ldi	r24, 0x0F	; 15
 116:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
	//4. Clear the Garbage values in LCD
	send_command(0x01);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
	//5. Set the starting Point of the LCD
	send_command(0x80);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
 126:	08 95       	ret

00000128 <print>:
}

void print(uint8_t lcdPosition, char* string)
{
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	eb 01       	movw	r28, r22
	int rem_char, row;
	if (lcdPosition >= 128 && lcdPosition < 144)
 136:	90 e8       	ldi	r25, 0x80	; 128
 138:	98 0f       	add	r25, r24
 13a:	90 31       	cpi	r25, 0x10	; 16
 13c:	20 f4       	brcc	.+8      	; 0x146 <print+0x1e>
	{
		row = 0;
		rem_char = 144-lcdPosition;
 13e:	00 e9       	ldi	r16, 0x90	; 144
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	08 1b       	sub	r16, r24
 144:	11 09       	sbc	r17, r1
	}
	send_command(lcdPosition);
 146:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
	while (*string != '\0')
 14a:	e1 2c       	mov	r14, r1
 14c:	f1 2c       	mov	r15, r1
 14e:	11 c0       	rjmp	.+34     	; 0x172 <print+0x4a>
	{
		if (rem_char == 0)
 150:	01 15       	cp	r16, r1
 152:	11 05       	cpc	r17, r1
 154:	59 f4       	brne	.+22     	; 0x16c <print+0x44>
		{
			if (row == 0)
 156:	e1 14       	cp	r14, r1
 158:	f1 04       	cpc	r15, r1
 15a:	31 f4       	brne	.+12     	; 0x168 <print+0x40>
			{
				row = 1;
				send_command(0xC0);
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	0e 94 41 00 	call	0x82	; 0x82 <send_command>
	{
		if (rem_char == 0)
		{
			if (row == 0)
			{
				row = 1;
 162:	ee 24       	eor	r14, r14
 164:	e3 94       	inc	r14
 166:	f1 2c       	mov	r15, r1
				send_command(0xC0);
			}
			rem_char = rem_char -1;
 168:	01 50       	subi	r16, 0x01	; 1
 16a:	11 09       	sbc	r17, r1
		}
		send_data(*string);
 16c:	89 91       	ld	r24, Y+
 16e:	0e 94 5e 00 	call	0xbc	; 0xbc <send_data>
	{
		row = 0;
		rem_char = 144-lcdPosition;
	}
	send_command(lcdPosition);
	while (*string != '\0')
 172:	88 81       	ld	r24, Y
 174:	81 11       	cpse	r24, r1
 176:	ec cf       	rjmp	.-40     	; 0x150 <print+0x28>
			rem_char = rem_char -1;
		}
		send_data(*string);
		string++;
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	08 95       	ret

00000186 <main>:

int main(void)
{
	DDRC = 0b00000011;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	81 bb       	out	0x11, r24	; 17
	LCD_Initialize();
 18e:	0e 94 7b 00 	call	0xf6	; 0xf6 <LCD_Initialize>
	{
		//print(0x80, "SHUBHI");
		//print(0xC0, "VASU");
		//print(0x90, "NANDINI");
		//print(0xD0, "DINESH");
		print(0x80, "HELLO THIS IS AN LCD OUTPUT");
 192:	60 e6       	ldi	r22, 0x60	; 96
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	0e 94 94 00 	call	0x128	; 0x128 <print>
 19c:	fa cf       	rjmp	.-12     	; 0x192 <main+0xc>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
