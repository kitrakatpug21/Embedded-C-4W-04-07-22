
DCMotor Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000639  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ac  00000000  00000000  000007e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000280  00000000  00000000  00000d91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033b  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001373  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <util/delay.h>

int main(void)
{
    DDRC = 0b11000011;	// Motor Here
  6c:	83 ec       	ldi	r24, 0xC3	; 195
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11100000;	// RGB LED here
  70:	80 ee       	ldi	r24, 0xE0	; 224
  72:	81 bb       	out	0x11, r24	; 17
	while (1) 
    {
		if (PINA & 0b00000001)	// FORWARD
  74:	c8 9b       	sbis	0x19, 0	; 25
  76:	05 c0       	rjmp	.+10     	; 0x82 <main+0x16>
		{
			PORTC = 0b01000001;	// both clock
  78:	81 e4       	ldi	r24, 0x41	; 65
  7a:	85 bb       	out	0x15, r24	; 21
			PORTD = 0b10000000;	// Blue Color
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	82 bb       	out	0x12, r24	; 18
  80:	18 c0       	rjmp	.+48     	; 0xb2 <main+0x46>
		}
		else if (PINA & 0b00001000)	// BACKWARD
  82:	cb 9b       	sbis	0x19, 3	; 25
  84:	05 c0       	rjmp	.+10     	; 0x90 <main+0x24>
		{
			PORTC = 0b10000010;	// both anti-clock
  86:	82 e8       	ldi	r24, 0x82	; 130
  88:	85 bb       	out	0x15, r24	; 21
			PORTD = 0b01000000;	// Green Color
  8a:	80 e4       	ldi	r24, 0x40	; 64
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	11 c0       	rjmp	.+34     	; 0xb2 <main+0x46>
		}
		else if (PINA & 0b00000010)	// LEFT
  90:	c9 9b       	sbis	0x19, 1	; 25
  92:	05 c0       	rjmp	.+10     	; 0x9e <main+0x32>
		{
			PORTC = 0b10000001;	// M1 clock M2 anti-clock
  94:	81 e8       	ldi	r24, 0x81	; 129
  96:	85 bb       	out	0x15, r24	; 21
			PORTD = 0b00100000;	// Red Color
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	0a c0       	rjmp	.+20     	; 0xb2 <main+0x46>
		}
		else if (PINA & 0b00000100)	// RIGHT
  9e:	ca 9b       	sbis	0x19, 2	; 25
  a0:	05 c0       	rjmp	.+10     	; 0xac <main+0x40>
		{
			PORTC = 0b01000010;	// M1 anti-clock M2 clock
  a2:	82 e4       	ldi	r24, 0x42	; 66
  a4:	85 bb       	out	0x15, r24	; 21
			PORTD = 0b01100000;	// Yellow Color
  a6:	80 e6       	ldi	r24, 0x60	; 96
  a8:	82 bb       	out	0x12, r24	; 18
  aa:	03 c0       	rjmp	.+6      	; 0xb2 <main+0x46>
		}
		else
		{
			PORTC = 0b00000000;	// all off
  ac:	15 ba       	out	0x15, r1	; 21
			PORTD = 0b11100000;	// White Color
  ae:	80 ee       	ldi	r24, 0xE0	; 224
  b0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x56>
  c2:	00 00       	nop
  c4:	d7 cf       	rjmp	.-82     	; 0x74 <main+0x8>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
