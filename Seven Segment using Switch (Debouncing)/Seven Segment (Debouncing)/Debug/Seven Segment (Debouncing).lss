
Seven Segment (Debouncing).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000e4  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000682  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d7  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000277  00000000  00000000  00000e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036f  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000150f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ee       	ldi	r30, 0xE4	; 228
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
						0b01100110,0b01101101,0b01111101,0b00000111,
						0b01111111,0b01101111};

int main(void)
{
	DDRC = 0b01111111;
  82:	8f e7       	ldi	r24, 0x7F	; 127
  84:	84 bb       	out	0x14, r24	; 20
	int count = 0, wait = 0;
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
	while (1) 
    {
		wait = 0;
		if (PINA & 0b00000001)
  8a:	c8 99       	sbic	0x19, 0	; 25
  8c:	0c c0       	rjmp	.+24     	; 0xa6 <main+0x24>
  8e:	22 c0       	rjmp	.+68     	; 0xd4 <main+0x52>
		{
			// debouncer statement
			while (PINA & 0b00000001)
			{
				wait = wait + 1;
  90:	01 96       	adiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	4f ef       	ldi	r20, 0xFF	; 255
  94:	52 e5       	ldi	r21, 0x52	; 82
  96:	67 e0       	ldi	r22, 0x07	; 7
  98:	41 50       	subi	r20, 0x01	; 1
  9a:	50 40       	sbci	r21, 0x00	; 0
  9c:	60 40       	sbci	r22, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x16>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x20>
  a2:	00 00       	nop
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x28>
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	90 e0       	ldi	r25, 0x00	; 0
    {
		wait = 0;
		if (PINA & 0b00000001)
		{
			// debouncer statement
			while (PINA & 0b00000001)
  aa:	c8 99       	sbic	0x19, 0	; 25
  ac:	f1 cf       	rjmp	.-30     	; 0x90 <main+0xe>
			{
				wait = wait + 1;
				_delay_ms(300);
			}
			if(wait < 3)
  ae:	03 97       	sbiw	r24, 0x03	; 3
  b0:	34 f4       	brge	.+12     	; 0xbe <main+0x3c>
			{
				if (count == 9)
  b2:	29 30       	cpi	r18, 0x09	; 9
  b4:	31 05       	cpc	r19, r1
  b6:	49 f0       	breq	.+18     	; 0xca <main+0x48>
				{	count = 0;	}
				else
				{	count = count + 1;	}
  b8:	2f 5f       	subi	r18, 0xFF	; 255
  ba:	3f 4f       	sbci	r19, 0xFF	; 255
  bc:	0b c0       	rjmp	.+22     	; 0xd4 <main+0x52>
			}
			else
			{
				if (count == 0)
  be:	21 15       	cp	r18, r1
  c0:	31 05       	cpc	r19, r1
  c2:	31 f0       	breq	.+12     	; 0xd0 <main+0x4e>
				{	count = 9;	}
				else
				{	count = count - 1;	}
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	31 09       	sbc	r19, r1
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <main+0x52>
				_delay_ms(300);
			}
			if(wait < 3)
			{
				if (count == 9)
				{	count = 0;	}
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x52>
				{	count = count + 1;	}
			}
			else
			{
				if (count == 0)
				{	count = 9;	}
  d0:	29 e0       	ldi	r18, 0x09	; 9
  d2:	30 e0       	ldi	r19, 0x00	; 0
				else
				{	count = count - 1;	}
			}
		}
		
		PORTC= segment[count];
  d4:	f9 01       	movw	r30, r18
  d6:	e0 5a       	subi	r30, 0xA0	; 160
  d8:	ff 4f       	sbci	r31, 0xFF	; 255
  da:	80 81       	ld	r24, Z
  dc:	85 bb       	out	0x15, r24	; 21
	}
  de:	d5 cf       	rjmp	.-86     	; 0x8a <main+0x8>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
